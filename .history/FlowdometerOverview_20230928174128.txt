FlowdometerOverview.txt

Readme
  https://raw.githubusercontent.com/michaelmuse/Flowdometer/master/README.md


Flows

  Flow 1 (Flowdometer - Listener Tracking Trigger):
    Latest code: https://gist.githubusercontent.com/michaelmuse/0bb5a6600c34799382b42c1998e9fbf9/raw/48ec3cb2a762beabc1470e6787ed06ca83576fc9/Listener_Batch_Flow.flow-meta.xml
    Name: Flowdometer - (1) Listener Tracking Trigger
      Description: Flowdometer handler for setting up listeners for your object and field.
      Trigger Conditions
      Object: Listener__c
      Trigger Type: Record After Save
      Record Trigger Type: Create and Update
      Additional Filters: isActive__c should be equal to true
      Elements
      Decision Element: "Check If the Flow is Active"

      Checks if Flowdometer__isActive__c field on the record is true.
      If true, moves to assignment element.
      Assignment Element: "FlowdoConfig Value Assignment"

      Assigns the current record to a variable varFlowdoConfig.
      Sub-Flow: "Listener Config Main Flow"

      Takes the varFlowdoConfig as an input argument.
      Scheduled Paths
      Run Every 3 Minutes: The flow runs every 3 minutes, depending on the Last_Check__c field of the record.
      Context of Loops and DMLs
      Loops: No loops detected.
      DML Operations: No explicit DML operations detected, but the sub-flow "Listener Config Main Flow" may have DML operations (we can't tell from this XML alone).
      Efficiency and Bulkification
      Efficiency: As far as we can tell from this XML, the flow seems relatively straightforward. It doesn't contain any loops or DML operations, which are usually the key factors affecting bulkification.

      Bulkification: Since the flow triggers after record creation and update, and it doesn't show any DML or loop operations, it should generally be bulk-safe. However, the sub-flow might be a point of concern for bulkification.

  Flow 2 (Flowdometer - Listener Finds Changed Records):
    Latest code: https://gist.githubusercontent.com/michaelmuse/8bd43794f17e72112704184ee04ddd7b/raw/b7b003785033b8a581d60acaafe51e460f9c0635/Listener_Configuration_Main_Flow.flow-meta.xml
      Name: Flowdometer - (2) Listener Finds Changed Records
        Description:
        Triggered by: Flowdometer - Listener Tracking Trigger. Flowdometer handler to query for untracked changes.

        Trigger Conditions
        This appears to be an AutoLaunched Flow, likely called from another flow or process.

        Elements
        Decision Element: "Check FlowdoConfig"
        Checks if varFlowDoConfig.isActive__c is true.
        If true, moves to record lookup.

        Record Lookup: "Get ALL Record Types"
        Queries for specific RecordType objects.

        Decision Element: "Found Record Types?"
        Checks if any records were found in the previous step.

        New: Apex Action: "Sort by Record Type"
        Calls an Apex action to sort records by their Record Type.

        Apex Action: "Query and Parse History Records Latest"
        Calls an Apex action ListenerFlowController and passes varFlowDoConfig as an input parameter.

        Decision Element: "Check Records"
        Checks the output from the Apex action to see if there are records (hasRecords) and if the check was successful (checkSuccess).

        Loop: "Loop Through Parsed Records"
        Iterates through lstListenerFlow.

        Sub-Flow: "Create Tracker Records Using Parsed History Records"
        Called within the loop to process each record.

        Assignment Elements:
        Multiple assignment elements to handle error messages and update Last_Check__c and Last_Execution_On__c.

        Record Update: "Update FlowdoConfig"
        Updates the Listener__c record.

        Context of Loops and DMLs
        Loops: One loop, "Loop Through Parsed Records," iterating through lstListenerFlow.

        DML Operations: Two explicit record update operations, plus the DMLs that might be in the sub-flow and Apex action.

        Efficiency and Bulkification
        Efficiency: This flow is more complex than the first one and includes Apex actions for sorting, loops, and multiple decision and assignment elements.

        Bulkification: The flow contains a loop and multiple DML operations, which could be points of concern for bulkification.
  Flow 3 (Flowdometer - Listener Creates Trackers):
    Latest code: https://gist.githubusercontent.com/michaelmuse/0cb1f81bb578cc10cd4f9c0189cc1793/raw/9617ea11496613561986f413c8f4d0771808adce/Listener_Flow_Sub_Flow.flow-meta.xml


Apex
  All Method signatures in my apex files:
    https://gist.githubusercontent.com/michaelmuse/c29b1571124939fa60fc0b26df14bba2/raw/acfd932c08c7eaa82cad03f44088426977e1649b/FlowdometerApexMethodSignatures.json
  ListenerFlowController.cls
    Latest code: https://gist.githubusercontent.com/michaelmuse/cb4df0a6a0c1cbf630e81cf28c70000f/raw/fc2f1c06093cab32555b00b60ea2e818d2df56b3/ListenerFlowController.cls
    Extensive summary of this controller in the comments at the beginning of the code
    Main Invocable Action: Query & Parse History Records
    Used by Flow 2
  ListenerFlowControllerTest.cls
    Latest code: https://gist.githubusercontent.com/michaelmuse/6908a3176b423bee76b216ab33948492/raw/c2e1bbfeaccaaccfaac00583a5f97d78158f9877/ListenerFlowControllerTest.cls
    Tests our controller, ListenerFlowController.cls
  TestDataFactory.cls
    Latest code: https://gist.githubusercontent.com/michaelmuse/6ff9d325ef68cf17d3c0688fc4461a1a/raw/92eb92bc3342a28a3bf401372075551b85a4e9d6/TestDataFactory.cls
    Builds data for ListenerFlowControllerTest.cls
  ListenerUpdateFlowController.cls
    Main Invocable Action: Update Flow Records
    Used by Flow 3
    Defined in ListenerUpdateFlowController.cls

Data Model
  https://gist.githubusercontent.com/michaelmuse/ef3ccbd0692b0c633f5428168442dd9f/raw/6307d878ee2af66961616bc658f25d1fbce03520/gist_content.json

Refactor
  Current Tracking Automation
    Description of Flow 1, 2, 3 behaviors
    DML Considerations
      At the moment, Flow 2’s invocable method isn’t grabbing any historical data on first run...
      In Flow 3, the given record will cause 3, 4, or 5 DML transactions...
      I’m concerned that if we successfully query all historical records on the first run...
  Plan for refactor of existing data
    To avoid potential DML errors while processing the historical records...
    Flow 3 would receive these batches, and have a new loop at the beginning...
    I’d also like to be on the lookout for any bugs in the code...
